const path = require('path');
const { defineConfig } = require('vite');
import vue from '@vitejs/plugin-vue';
import vueJsx from '@vitejs/plugin-vue-jsx';
// import AutoImport from 'unplugin-auto-import/vite';
// import Components from 'unplugin-vue-components/vite';
// import ElementPlus from 'unplugin-element-plus/vite';
// import { ElementPlusResolver } from 'unplugin-vue-components/resolvers';

module.exports = defineConfig({
  resolve: {
    alias: {
      '@larajs/core': path.resolve(__dirname, './src'),
    },
  },
  plugins: [
    vue(),
    vueJsx(),
    // AutoImport({
    //   resolvers: [ElementPlusResolver()],
    // }),
    // Components({
    //   resolvers: [
    //     ElementPlusResolver({
    //       importStyle: 'sass',
    //     }),
    //   ],
    //   include: [/\.vue$/, /\.vue\?vue/, /\.jsx$/],
    // }),
    // ElementPlus({
    //   useSource: true,
    // }),
  ], // to process SFC
  build: {
    lib: {
      entry: path.resolve(__dirname, 'src/index.ts'),
      name: '@larajs/core',
      formats: ['es'], // adding 'umd' requires globals set to every external module
      fileName: (format: any) => `@larajs/core.${format}.js`,
    },
    rollupOptions: {
      // external modules won't be bundled into your library
      external: ['vue'], // not every external has a global
      output: {
        // disable warning on src/index.ts using both default and named export
        exports: 'named',
        // Provide global variables to use in the UMD build
        // for externalized deps (not useful if 'umd' is not in lib.formats)
        globals: {
          vue: 'Vue',
        },
      },
    },
    emptyOutDir: false, // to retain the types folder generated by tsc
  },
});
